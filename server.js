const express = require('express')
const app = express()
const port = 3000;
const bodyParser = require('body-parser')
const mariadb = require('mariadb');
const { body, validationResult } = require('express-validator');
const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root',
	password: 'root',
	database: 'sample',
	port: 3306,
	connectionLimit: 5
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');


const options = {
    swaggerDefinition: {
        info: {
            title: 'Personal Bugdet API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated by '
        
        },
        host: "167.172.154.60",
        basePath: "/",
    },
    apis: ["./server.js"],
};

const specs = swaggerJsdoc(options);
app.use("/docs", swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

var mcache = require('memory-cache');

var cache = (duration) => {
        return (res,req,next) => {
                let key = '__express__' + req.originalURL || req.url
                let cachedBody = mcache.get(key)
                if(cachedBody){
                        res.send(cachedBody)
                        return
                }
                else{
                        res.sendResponse = res.send
                        res.send = (body) => {
				console.log("inside body")
                                mcache.put(key, body, duration * 1000);
                                res.sendFResponse(body)
                        }
			next()
                }
        }
}

app.get('/',cache(10),(req,res) => {
	res.send("welcome to my application");
})

/**
 * @swagger
 * /agents:
 *    get:
 *      description: Returns all the records from the Agents table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: JSON bbject containing array of Agents objects
 */
app.get(('/agents'),cache(120),async (req,res) => {
		
		let conn;
		try{
			conn = await pool.getConnection();
			//res.json({message: "Connected to db"});
			var query = "select * from agents ";
			var rows = await conn.query(query);
			//console.log(rows);
			res.status(200);	
			res.setHeader('Content-Type', 'application/json');
			res.send(JSON.stringify(rows))		
		}catch (err){
			throw err;
		} finally {
			if (conn) return conn.end();
		}

})

/**
 * @swagger
 * /companies:
 *    get:
 *      description: Returns all the records from the Company table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: JSON bbject containing array of company objects
 */
app.get(('/companies'),cache(120),async (req,res) => {
        let conn;
        try{
 
               conn = await pool.getConnection();
                //res.json({message: "Connected to db"});
                var query = "select * from company ";
                var rows = await conn.query(query);
                //console.log(rows);
		res.status(200);
		res.setHeader('Content-Type', 'application/json');
                res.send(JSON.stringify(rows))
        }catch (err){
                throw err;
        } finally {
                if (conn) return conn.end();
        }
})

app.get(('/students'),cache(120), async (req,res) => {
        let conn;
        try{
                conn = await pool.getConnection();
                //res.json({message: "Connected to db"});
                var query = "select * from student ";
                var rows = await conn.query(query);
                //console.log(rows);
		res.status(200);
		res.setHeader('Content-Type', 'application/json');
                res.send(JSON.stringify(rows))
        }catch (err){
                throw err;
        } finally {
                if (conn) return conn.end();
        }
})

app.get(('/customers'),cache(120),async (req,res) => {
        let conn;
        try{
                conn = await pool.getConnection();
                //res.json({message: "Connected to db"});
                var query = "select * from customer ";
                var rows = await conn.query(query);
                //console.log(rows);
                res.status(200);
		res.setHeader('Content-Type', 'application/json');
                res.send(JSON.stringify(rows))
        }catch (err){
                throw err;
        } finally {
                if (conn) return conn.end();
        }
})
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())

/**
 * @swagger
 * definitions:
 *   Agents:
 *     properties:
 *       AGENT_CODE:
 *         type: string
 *       AGENT_NAME:
 *         type: string
 *       WORKING_AREA:
 *         type: string
 *       COMMISSION:
 *         type: string
 *       PHONE_NO:
 *         type: string
 *       COUNTRY:
 *         type: string
 */
/**
 * @swagger
 * /companies:
 *    post:
 *      description: Add a record to the company table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added data to the agents table
 *      parameters:
 *          - name: Agent
 *            description: the agent object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Agents'
 *
 */
app.post(('/agents'),async (req,res) => {
    let conn;
    try{
        conn = await pool.getConnection();
	console.log(req.body)
	var query = `INSERT INTO agents (AGENT_CODE, AGENT_NAME, WORKING_AREA,COMMISSION,PHONE_NO,COUNTRY) VALUES ('${req.body.AGENT_CODE}', '${req.body.AGENT_NAME}', '${req.body.WORKING_AREA}', '${req.body.COMMISSION}', '${req.body.PHONE_NO}', '${req.body.COUNTRY}')`;
	var rows = await conn.query(query);
        res.send(req.body)
        res.status(200);
    }catch (err){
        console.log(err);
        throw err;
    } finally {
        if (conn) return conn.end();
    }

})


/**
 * @swagger
 * definitions:
 *   Company:
 *     properties:
 *       COMPANY_ID:
 *         type: string
 *       COMPANY_NAME:
 *         type: string
 *       COMPANY_CITY:
 *         type: string
 */
/**
 * @swagger
 * /companies:
 *    post:
 *      description: Add a record to the company table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added data to the company table
 *      parameters:
 *          - name: Company
 *            description: the company object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Company'
 *
 */
app.post(('/companies'),async (req,res) => {
    //const errors = validationResult(req);
    //if (!errors.isEmpty()) {
    //	return res.status(400).json({ errors: errors.array() });
    //}	
    let conn;
    try{
        conn = await pool.getConnection();
        console.log(req.body)
	var query = `INSERT INTO company (COMPANY_ID, COMPANY_NAME, COMPANY_CITY) VALUES ('${req.body.COMPANY_ID}', '${req.body.COMPANY_NAME}', '${req.body.COMPANY_CITY}')`;
        var rows = await conn.query(query);
        res.send(req.body)
        res.status(200);
    }catch (err){
        console.log(err);
        throw err;
    } finally {
        if (conn) return conn.end();
    }

})



 /**
 * @swagger
 * /companies/{id}:
 *    patch:
 *      description: Update a record from company table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Updated data from companytable
 *          404:
 *              description: No record for given ItemId
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *          - name: Company
 *            description: company object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Company'
 *
 */
app.patch('/companies/:id',
    async (req,res)=>{
    let conn;
    const id = req.params.id
    console.log(req.params.id)
        console.log("Body" + req.body)
    const {COMPANY_NAME,COMPANY_CITY}=req.body
    let rows=0
    try{
        conn= await pool.getConnection();
        if (COMPANY_NAME && COMPANY_CITY){
                const result= await pool.query(`UPDATE company SET COMPANY_NAME='${COMPANY_NAME}', COMPANY_CITY='${COMPANY_CITY}' WHERE COMPANY_ID = '${id}'`)
                rows = result.affectedRows
        }
        else if (COMPANY_NAME) {
                const result= await pool.query(`UPDATE company SET COMPANY_NAME='${COMPANY_NAME}' WHERE COMPANY_ID = '${id}'`)
                rows = result.affectedRows
        }
        else if (COMPANY_CITY){
                const result= await pool.query(`UPDATE company SET COMPANY_CITY='${COMPANY_CITY}' WHERE COMPANY_ID = '${id}'`)
                rows = result.affectedRows
        }
        if(rows==0) {
                return res.status(404).send('Record not Found');
        }
        return res.status(200).send("Updated Successfully");
        }
catch(error) {
        console.log(error)
        res.status(500).send('Server Error');
    }
finally{
    if (conn) return conn.end();
}
});



/**
 * @swagger
 * /companies/{id}:
 *    put:
 *      description: Add or Update a record from companies table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added or Updated data to company table
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *          - name: Company
 *            description: company object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Company'
 *
 */
app.put(('/companies/:COMPANY_ID'),async (req,res) => {
    let conn;
    try{
        conn = await pool.getConnection();
        console.log(req.body)
	var query = `UPDATE company SET COMPANY_CITY = '${req.body.COMPANY_CITY}',COMPANY_NAME='${req.body.COMPANY_NAME}' WHERE COMPANY_ID = '${req.params.COMPANY_ID}'`;
        var rows = await conn.query(query);
        //console.log(rows.affectedRows)
        if(rows.affectedRows == 0){
            var selectQuery = `INSERT INTO company (COMPANY_ID, COMPANY_NAME, COMPANY_CITY) VALUES ('${req.params.COMPANY_ID}', '${req.body.COMPANY_NAME}', '${req.body.COMPANY_CITY}')`;
            var rowsAdded = await conn.query(selectQuery);
        }
        else{
            res.status(200).send("Updated Successfully");
        }
        res.end()
    }catch (err){
        console.log(err);
        throw err;
    } finally {
        if (conn) return conn.end();
    }

})


/**
 * @swagger
 * /companies/{id}:
 *    delete:
 *      description: Delete the record in the company table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Successfully deleted record from table
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *
 */
app.delete(('/companies/:COMPANY_ID'),async (req,res) => {
    let conn;
    try{
        conn = await pool.getConnection();
        console.log(req.body)
	var query = `DELETE FROM company WHERE COMPANY_ID='${req.params.COMPANY_ID}'`;
        var rows = await conn.query(query);
        //console.log(rows.affectedRows)
        if(rows.affectedRows == 0){
            res.status(404)
        }
        else{
            res.status(200).send("Deleted Successfully");
        }
        res.end()
    }catch (err){
        console.log(err);
        throw err;
    } finally {
        if (conn) return conn.end();
    }

})


app.listen(3000, () => {
 console.log(`Example app listening at http:localhost:${port}`)
})
   
 

  
